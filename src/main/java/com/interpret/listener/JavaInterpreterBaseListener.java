package com.interpret.listener;

import java.util.HashSet;
import java.util.Set;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import com.actions.JavaAction;
import com.antlr.Java8BaseListener;
import com.antlr.Java8Lexer;
import com.antlr.Java8Parser;
import com.antlr.Java8Parser.ClassDeclarationContext;
import com.antlr.Java8Parser.FieldDeclarationContext;
import com.antlr.Java8Parser.MethodDeclarationContext;
import com.antlr.Java8Parser.StatementExpressionContext;

/**
 * Class that extends {@link Java8BaseListener}, the base listener generated by ANTLR. But, here we figure out
 * the topmost part of the parse tree we care about and then pass the input along into the nested listener we created for
 * each of these topmost trees.
 *
 * @author <a href="mailto:mxt4877@rit.edu">Mike Thomsen</a>
 */
public class JavaInterpreterBaseListener extends Java8BaseListener {
	
	/**
	 * The actual input.
	 */
	private String rawInput;
	
	/**
	 * The list of dependent actions we determined from parsing.
	 */
	private Set<JavaAction> dependentActions = new HashSet<JavaAction>();
	
	/**
	 * The new action we are going to create here.
	 */
	private JavaAction newAction;
	
	/**
	 * The constructor that takes the raw input in.
	 * 
	 * @param rawInput -- the raw input.
	 */
	public JavaInterpreterBaseListener(String rawInput) {
		this.rawInput = rawInput;
	}
	
	@Override
	public void enterFieldDeclaration(FieldDeclarationContext feildDeclarationContext) {
		
		// Go walk this specifically.
		Java8Parser newParser = getNewParser();
		
		// Pass through the raw input to the field listener.
		JavaFieldListener listener = new JavaFieldListener(rawInput);
		
		// Get the walker and walk with the new listener.
		ParseTreeWalker walker = new ParseTreeWalker();
		walker.walk(listener, newParser.fieldDeclaration());
		
		// Set the new action.
		this.newAction = listener.getJavaAction();
	}
	
	@Override
	public void enterStatementExpression(StatementExpressionContext statementContext) {
		System.out.println("Got an statement expression context...");
	}
	
	@Override
	public void enterMethodDeclaration(MethodDeclarationContext methodDeclarationContext) {
		System.out.println("Got a method...");
	}
	
	@Override
	public void enterClassDeclaration(ClassDeclarationContext classDeclarationContext) {
		System.out.println("Got a class...");
	}
	
	/**
	 * Get the java action from the nested listener we created.
	 * 
	 * @return {@link JavaAction} -- the new java action.
	 */
	public JavaAction getJavaAction() {
		return this.newAction;
	}
	
	/**
	 * Method to get the new parser.
	 * 
	 * @return {@link Java8Parser}, the parser.
	 */
	private Java8Parser getNewParser() {
		
		// Put it into a lexer.
    	Java8Lexer java8Lexer = new Java8Lexer(new ANTLRInputStream(this.rawInput));
    	
    	// Generate the token stream from that lexer.
    	CommonTokenStream tokenStream = new CommonTokenStream(java8Lexer);
    	
    	// Now return the parser.
    	return new Java8Parser(tokenStream);
	}
}
